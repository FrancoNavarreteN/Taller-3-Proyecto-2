
Tarea 2 - INFO088 - Taller de Estructuras de Datos y Algoritmos
Universidad Austral de Chile - Junio 2025

Resumen

Este trabajo tiene como objetivo profundizar en el uso y análisis de estructuras de datos aplicadas a la simulación de un sistema de archivos. Se implementará un sistema basado en un árbol k-ario para almacenar nombres de directorios y archivos, estudiando el rendimiento de operaciones fundamentales (búsqueda, inserción y eliminación) mediante experimentos controlados. Se enfatizará la elección, justificación y análisis asintótico (notación O) de los algoritmos, destacando la importancia de las estructuras de datos en la optimización de procesos computacionales.

Descripción del Problema

Se requiere simular un sistema de archivos jerárquico utilizando un árbol k-ario. Los nodos almacenarán cadenas que representan nombres de directorios (nodos intermedios) o archivos (nodos hoja). Los datos se leerán del sistema de archivos Linux y se almacenarán en la estructura. Posteriormente, se realizarán operaciones de búsqueda, inserción y eliminación evaluando su rendimiento experimentalmente.

Descripción de la Solución

Estructura de Datos

struct NodoArbol {
    string nombre;
    vector<NodoArbol*> hijos; // Vector siempre ordenado lexicográficamente
};

- nombre: Nombre del directorio o archivo.
- hijos: Vector de punteros a hijos. Si está vacío, el nodo representa un archivo.

Tareas

1. Carga de Datos
   - Usar la librería <filesystem> para recorrer directorios en Linux.
   - Insertar cada elemento (ruta relativa) en el árbol.
   - Recorrido en preorden.

2. Construcción de la Estructura
   - Construir el árbol k-ario con los datos leídos.
   - Medir tiempos de creación para distintos tamaños.

3. Búsqueda
   - Implementar búsqueda por rutas relativas (ej: raiz/dir1/archivo1).
   - Búsqueda binaria en cada nivel.
   - Retornar:
     - 0 si existe el archivo.
     - 1 si no existe.
     - 2 si es un directorio.

4. Eliminación e Inserción
   - Eliminación:
     - Remover nodo si es archivo.
     - Remover nodo y subárbol si es directorio.
     - Retorna true si tuvo éxito, false si no existe.
   - Inserción:
     - Buscar directorio padre.
     - Insertar nodo nuevo manteniendo orden lexicográfico.
     - Retornar:
       - 0 en éxito.
       - 1 si el archivo ya existe.
       - 2 si no existe ruta padre.

Experimentación

Configuraciones:
- Pequeña: 20k directorios / 200k archivos
- Mediana: 100k directorios / 1M archivos
- Grande: 1M directorios / 10M archivos

Operaciones (REP = 100.000):
1. Tiempo de creación del árbol
2. REP búsquedas aleatorias
3. REP eliminaciones aleatorias
4. REP inserciones en 2.000 directorios aleatorios

Se requiere hacer gráficos comparativos con la estructura de la tarea anterior:
- Tiempo de creación vs tamaño n
- Tiempo promedio de búsqueda vs tamaño n
- Tiempo de eliminación vs tamaño n

Requisitos de Entrega

Documento (45%) - Máximo 12 páginas:
- Abstract: Resumen del documento, estructuras, operaciones, experimentos.
- Introducción: Contexto del sistema de archivos, árbol k-ario, rutas.
- Metodología: Algoritmos de inserción, búsqueda y eliminación.
- Resultados: Gráficos y análisis.
- Análisis Asintótico: Complejidad (O) con parámetros como altura o número máximo de hijos.
- Conclusiones: Comparación entre teoría y práctica, rol de las estructuras.

Código Fuente (45%):
- Modular.
- Usar <filesystem>.
- Archivos principales: main.cpp, experimentacion.cpp, arbol.cpp.
- Código organizado y documentado.

Corrección Tarea 1 (10%)

Entrega y Revisión
- Entrega: Lunes 7 de julio de 2025 vía Siveduc.
- Revisión: Semana del 7 de julio en reuniones presenciales.
- Inscripción: Vía hoja de cálculo enviada el 4 de julio.
